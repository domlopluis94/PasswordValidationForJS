class PasswordController { ValidatePassword(e, t) { this.NotSimilar(e, t) && this.HasCapital(t) && this.HasLowerCase(t) && this.HasSpecialCharacter(t) && this.MinimunLength(t) }
    NotSimilar(e, t) { return t != e }
    HasLowerCase(e) { return e.toUpperCase() != e }
    HasCapital(e) { return /[A-Z]/.test(e) }
    HasSpecialCharacter(e) { return !!/[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/.test(e) }
    HasDuplicates(e) { return !!/([a-z])\1/i.test(e) }
    CheckIfStringSequential(e) { return -1 === "0123456789".indexOf(e) && -1 === "9876543210".indexOf(e) }
    MinimunLength(e, t) { return e.length >= t }
    extractContinousNumbers(e) { return e.match(/\d+/g) }
    CheckIfSequential(e) { let t = this.extractContinousNumbers(e),
            a = !1; return null != t && t.forEach(e => {!this.CheckIfStringSequential(e) && e.length > 1 && (a = !0) }), a }
    DynamicPasswordValidation(e, t) { let a = document.getElementById(e),
            n = document.getElementById(t);
        document.getElementById(e).addEventListener("input", () => { let e = this.DetectUnfulfilledProperties(n.value, a.value);
            console.log(e) }) }
    DynamicPasswordValidationWithWarings(e, t, a) { let n = document.getElementById(e),
            i = document.getElementById(t),
            l = document.getElementById(a);
        document.getElementById(e).addEventListener("input", () => { let e = this.DetectUnfulfilledProperties(i.value, n.value);
            l.innerText = this.UnfulfilledProperties(e) }) }
    DynamicPasswordValidationWithWaringsAndSecondValidation(e, t, a, n, i) { let l = document.getElementById(e),
            s = document.getElementById(a),
            r = document.getElementById(n),
            u = document.getElementById(t),
            o = document.getElementById(i);
        o.style.display = "none", l.addEventListener("input", () => { let e = this.DetectUnfulfilledProperties(s.value, l.value);
            r.innerText = this.UnfulfilledProperties(e), r.innerText += u.value != l.value ? "Las Contraseñas tienen que coincidir " : "", "" == this.UnfulfilledProperties(e) && u.value == l.value ? o.style.display = "block" : o.style.display = "none" }), u.addEventListener("input", () => { let e = this.DetectUnfulfilledProperties(s.value, l.value);
            r.innerText = this.UnfulfilledProperties(e), r.innerText += u.value != l.value ? "Las Contraseñas tienen que coincidir " : "", "" == this.UnfulfilledProperties(e) && u.value == l.value ? o.style.display = "block" : o.style.display = "none" }) }
    UnfulfilledProperties(e) { return `${e.isNotEqualsToOldPassword?"":"La contraseña Actual no puede ser igual a la antigua \n"}${e.hasLowerCase?"":"Falta una minúscula \n"}${e.hasCapital?"":"Falta una mayúscula \n"}${e.hasSpecialCharacter?"":"Falta un caracter especial \n"}${e.hasDuplicates?"No puede contener caracteres duplicados contiguos \n":""}${e.checkIfSequential?"No puede contener secuencias de números \n":""}${e.hasMinimunLength?"":"No contiene el mínimo de 8 caracteres \n"}` }
    DetectUnfulfilledProperties(e, t) { return { isNotEqualsToOldPassword: this.NotSimilar(e, t), hasLowerCase: this.HasLowerCase(t), hasCapital: this.HasCapital(t), hasSpecialCharacter: this.HasSpecialCharacter(t), hasMinimunLength: this.MinimunLength(t, 8), hasDuplicates: this.HasDuplicates(t), checkIfSequential: this.CheckIfSequential(t) } } }
var passwordController = new PasswordController;